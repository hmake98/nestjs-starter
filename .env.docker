# ==============================================
# NESTJS STARTER - ENVIRONMENT CONFIGURATION
# ==============================================
# Copy this file to .env.docker and update the values according to your setup
# DO NOT commit actual credentials to version control

# ==============================================
# APPLICATION SETTINGS
# ==============================================
NODE_ENV="local"
APP_NAME="nestjs-starter"
APP_DEBUG=true
APP_LOG_LEVEL="debug"

# CORS Origins - comma separated list of allowed origins
APP_CORS_ORIGINS="http://localhost:3000,http://localhost:3001,http://staging.yourdomain.com,http://admin.staging.yourdomain.com"

# ==============================================
# HTTP SERVER CONFIGURATION
# ==============================================
HTTP_HOST="0.0.0.0"
HTTP_PORT=3001
HTTP_VERSIONING_ENABLE=true
HTTP_VERSION=1

# ==============================================
# ERROR TRACKING - SENTRY
# ==============================================
# Get your DSN from https://sentry.io/
SENTRY_DSN=""

# ==============================================
# AUTHENTICATION & JWT
# ==============================================
# Generate strong random secrets for production
# You can use: openssl rand -base64 32
AUTH_ACCESS_TOKEN_SECRET="your-super-secret-access-token-key-here"
AUTH_REFRESH_TOKEN_SECRET="your-super-secret-refresh-token-key-here"
AUTH_ACCESS_TOKEN_EXP="1d"
AUTH_REFRESH_TOKEN_EXP="7d"

# ==============================================
# DATABASE CONFIGURATION
# ==============================================
# PostgreSQL connection string
# Format: postgresql://username:password@host:port/database?schema=public
DATABASE_URL="postgresql://postgres:your_password_here@postgres:5432/nestjs_starter?schema=public"

# ==============================================
# AWS CONFIGURATION
# ==============================================
# AWS IAM credentials with appropriate permissions
AWS_ACCESS_KEY="your_aws_access_key_here"
AWS_SECRET_KEY="your_aws_secret_key_here"
AWS_REGION="us-east-1"

# ==============================================
# AWS S3 CONFIGURATION
# ==============================================
# Pre-signed URL expiration time in seconds (1200 = 20 minutes)
AWS_PRESIGN_LINK_EXPIRES=1200
# S3 bucket name for file uploads
AWS_BUCKET="your-s3-bucket-name"

# ==============================================
# AWS SES CONFIGURATION
# ==============================================
# Verified sender email address in AWS SES
SOURCE_EMAIL="noreply@yourdomain.com"

# ==============================================
# REDIS CONFIGURATION
# ==============================================
REDIS_HOST="redis"
REDIS_PORT=6379
REDIS_PASSWORD=""
REDIS_ENABLE_TLS=false

# ==============================================
# ADDITIONAL NOTES
# ==============================================
# 1. For production, use environment-specific values
# 2. Never commit real credentials to version control
# 3. Use AWS IAM roles when running on AWS infrastructure
# 4. Enable Redis AUTH and TLS for production environments
# 5. Use a managed database service for production (AWS RDS, etc.)
