// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                   @id @default(uuid())
  email                   String                   @unique
  password                String?
  first_name              String?
  last_name               String?
  is_verified             Boolean                  @default(false)
  phone                   String?
  role                    Roles                    @default(USER)
  created_at              DateTime                 @default(now())
  updated_at              DateTime                 @updatedAt
  deleted_at              DateTime?
  is_deleted              Boolean                  @default(false)
  avatar                  String?
  posts                   Post[]
  notification_recipients NotificationRecipients[]
  notification            Notification[]

  @@map("users")
}

model Post {
  id         String       @id @default(uuid())
  title      String
  content    String
  images     PostImages[]
  author     User         @relation(fields: [author_id], references: [id])
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  deleted_at DateTime?
  is_deleted Boolean      @default(false)
  author_id  String

  @@index([author_id])
  @@map("posts")
}

model PostImages {
  id         String    @id @default(uuid())
  image      String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
  is_deleted Boolean   @default(false)
  post       Post?     @relation(fields: [post_id], references: [id])
  post_id    String?

  @@index([post_id])
  @@map("posts_images")
}

model Notification {
  id         String                   @id @default(uuid())
  title      String
  body       String
  payload    Json?
  type       NotificationTypes
  sender     User                     @relation(fields: [sender_id], references: [id])
  recipients NotificationRecipients[]
  is_deleted Boolean                  @default(false)
  created_at DateTime                 @default(now())
  updated_at DateTime                 @updatedAt
  deleted_at DateTime?
  sender_id  String

  @@index([sender_id])
  @@map("notifications")
}

model NotificationRecipients {
  id              String        @id @default(uuid())
  user            User          @relation(fields: [users_id], references: [id])
  users_id        String
  notification    Notification? @relation(fields: [notification_id], references: [id])
  notification_id String?
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt

  @@map("notification_recipients")
}

enum FileType {
  MP3
  MP4
  JPEG
  JPG
  CSV
  WAV
  PNG
  JSON
  MKV
}

enum Roles {
  USER
  ADMIN
}

enum NotificationTypes {
  EMAIL
  TEXT
  IN_APP
}
